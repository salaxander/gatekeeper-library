"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8445],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?o.createElement(y,p(p({ref:n},c),{},{components:t})):o.createElement(y,p({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,p=new Array(a);p[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<a;s++)p[s]=t[s];return o.createElement.apply(null,p)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8188:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={id:"proc-mount",title:"Proc Mount"},p="Proc Mount",i={unversionedId:"proc-mount",id:"proc-mount",title:"Proc Mount",description:"Description",source:"@site/docs/proc-mount.md",sourceDirName:".",slug:"/proc-mount",permalink:"/gatekeeper-library/website/proc-mount",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/proc-mount.md",tags:[],version:"current",frontMatter:{id:"proc-mount",title:"Proc Mount"},sidebar:"docs",previous:{title:"Privileged Container",permalink:"/gatekeeper-library/website/privileged-containers"},next:{title:"Read Only Root Filesystem",permalink:"/gatekeeper-library/website/read-only-root-filesystem"}},l={},s=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"proc-mount"},"Proc Mount"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Controls the allowed ",(0,r.kt)("inlineCode",{parentName:"p"},"procMount")," types for the container. Corresponds to the ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedProcMountTypes")," field in a PodSecurityPolicy. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes"},"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes")),(0,r.kt)("h2",{id:"template"},"Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspprocmount\n  annotations:\n    metadata.gatekeeper.sh/title: "Proc Mount"\n    description: >-\n      Controls the allowed `procMount` types for the container. Corresponds to\n      the `allowedProcMountTypes` field in a PodSecurityPolicy. For more\n      information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPProcMount\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the allowed `procMount` types for the container. Corresponds to\n            the `allowedProcMountTypes` field in a PodSecurityPolicy. For more\n            information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            procMount:\n              type: string\n              description: >-\n                Defines the strategy for the security exposure of certain paths\n                in `/proc` by the container runtime. Setting to `Default` uses\n                the runtime defaults, where `Unmasked` bypasses the default\n                behavior.\n              enum:\n                - Default\n                - Unmasked\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspprocmount\n\n        import data.lib.exempt_container.is_exempt\n\n        violation[{"msg": msg, "details": {}}] {\n            c := input_containers[_]\n            not is_exempt(c)\n            allowedProcMount := get_allowed_proc_mount(input)\n            not input_proc_mount_type_allowed(allowedProcMount, c)\n            msg := sprintf("ProcMount type is not allowed, container: %v. Allowed procMount types: %v", [c.name, allowedProcMount])\n        }\n\n        input_proc_mount_type_allowed(allowedProcMount, c) {\n            allowedProcMount == "default"\n            lower(c.securityContext.procMount) == "default"\n        }\n        input_proc_mount_type_allowed(allowedProcMount, c) {\n            allowedProcMount == "unmasked"\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.containers[_]\n            c.securityContext.procMount\n        }\n        input_containers[c] {\n            c := input.review.object.spec.initContainers[_]\n            c.securityContext.procMount\n        }\n        input_containers[c] {\n            c := input.review.object.spec.ephemeralContainers[_]\n            c.securityContext.procMount\n        }\n\n        get_allowed_proc_mount(arg) = out {\n            not arg.parameters\n            out = "default"\n        }\n        get_allowed_proc_mount(arg) = out {\n            not arg.parameters.procMount\n            out = "default"\n        }\n        get_allowed_proc_mount(arg) = out {\n            not valid_proc_mount(arg.parameters.procMount)\n            out = "default"\n        }\n        get_allowed_proc_mount(arg) = out {\n            out = lower(arg.parameters.procMount)\n        }\n\n        valid_proc_mount(str) {\n            lower(str) == "default"\n        }\n        valid_proc_mount(str) {\n            lower(str) == "unmasked"\n        }\n      libs:\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n')),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/template.yaml\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"default-proc-mount-required"),(0,r.kt)("blockquote",null,(0,r.kt)("details",null,(0,r.kt)("summary",null,"constraint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPProcMount\nmetadata:\n  name: psp-proc-mount\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    procMount: Default\n\n')),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/constraint.yaml\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-disallowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-disallowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      procMount: Unmasked #Default\n\n")),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/constraint.yaml\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-allowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-disallowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      procMount: Default\n\n")),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/constraint.yaml\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"disallowed-ephemeral"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-proc-mount-disallowed\n  labels:\n    app: nginx-proc-mount\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n    securityContext:\n      procMount: Unmasked #Default\n\n")),(0,r.kt)("p",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/proc-mount/samples/psp-proc-mount/constraint.yaml\n"))))))}u.isMDXComponent=!0}}]);