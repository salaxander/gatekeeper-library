"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[934],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,g=m["".concat(o,".").concat(u)]||m[u]||d[u]||s;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<s;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6613:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const s={id:"block-wildcard-ingress",title:"Block wildcard ingress"},l="Block wildcard ingress",i={unversionedId:"block-wildcard-ingress",id:"block-wildcard-ingress",title:"Block wildcard ingress",description:"Description",source:"@site/docs/block-wildcard-ingress.md",sourceDirName:".",slug:"/block-wildcard-ingress",permalink:"/gatekeeper-library/website/block-wildcard-ingress",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/block-wildcard-ingress.md",tags:[],version:"current",frontMatter:{id:"block-wildcard-ingress",title:"Block wildcard ingress"},sidebar:"docs",previous:{title:"Block NodePort",permalink:"/gatekeeper-library/website/block-nodeport-services"},next:{title:"Container Limits",permalink:"/gatekeeper-library/website/containerlimits"}},o={},c=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"block-wildcard-ingress"},"Block wildcard ingress"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Users should not be able to create Ingresses with a blank or wildcard (*) hostname since that would enable them to intercept traffic for other services in the cluster, even if they don't have access to those services."),(0,a.kt)("h2",{id:"template"},"Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sblockwildcardingress\n  annotations:\n    metadata.gatekeeper.sh/title: "Block wildcard ingress"\n    description: >-\n      Users should not be able to create Ingresses with a blank or wildcard (*) hostname since that would enable them to intercept traffic for other services in the cluster, even if they don\'t have access to those services.\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sBlockWildcardIngress\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package K8sBlockWildcardIngress\n\n        contains_wildcard(hostname) = true {\n          hostname == ""\n        }\n\n        contains_wildcard(hostname) = true {\n          contains(hostname, "*")\n        }\n\n        violation[{"msg": msg}] {\n          input.review.kind.kind == "Ingress"\n          # object.get is required to detect omitted host fields\n          hostname := object.get(input.review.object.spec.rules[_], "host", "")\n          contains_wildcard(hostname)\n          msg := sprintf("Hostname \'%v\' is not allowed since it counts as a wildcard, which can be used to intercept traffic from other applications.", [hostname])\n        }\n\n')),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/template.yaml\n")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"block-wildcard-ingress"),(0,a.kt)("blockquote",null,(0,a.kt)("details",null,(0,a.kt)("summary",null,"constraint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sBlockWildcardIngress\nmetadata:\n  name: block-wildcard-ingress\nspec:\n  match:\n    kinds:\n      - apiGroups: ["extensions", "networking.k8s.io"]\n        kinds: ["Ingress"]\n\n')),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/constraint.yaml\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"example-allowed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: non-wildcard-ingress\nspec:\n  rules:\n  - host: 'myservice.example.com'\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n")),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/constraint.yaml\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"blank-host"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wildcard-ingress\nspec:\n  rules:\n  - host: ''\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n")),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/constraint.yaml\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"host-omitted"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wildcard-ingress\nspec:\n  rules:\n  # Omitted host field counts as a wildcard too\n  - http:\n      paths:\n      - pathType: Prefix\n        path: "/"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n')),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/constraint.yaml\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"wildcard-host"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wildcard-ingress\nspec:\n  rules:\n  - host: '*.example.com'\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n  # Extra test to ensure the rule still detects invalid hosts in files containing valid hosts\n  - host: 'valid.example.com'\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: example\n            port:\n              number: 80\n\n")),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/block-wildcard-ingress/samples/block-wildcard-ingress/constraint.yaml\n"))))))}d.isMDXComponent=!0}}]);